(a) The runtime for this method is  O(n^3)

To see this, we see that the first for loop will execute n times, thus the body of the
second loop will execute a number of times equal to the sum of k^2 from k=0 to k=n.
Through an algebraic induction proof, we find that this is a third order polynomial, therefore,
the running time of this algorithm is O(n^3)



(b) The runtime for this method is O(log n)

To see this, assume the body will execute k times.  Each execution will reduce i by 1/3, therfore,
n must be such that n*(1/3)^k < 1. Using algebraic manipulation we can do the following
n*(1/3)^k < 1
n < 3^k
log_3(n) < k
Thus the running time of this algorithm is O(log n)




(c) The runtime for this method is O( log( n^(n-1) / (n-1)! ) )

To see this, first observe that the first loop executes n times, and that the second loop will execute
log(n/k) times where k is the current iteration of the first loop.
Thus we can write the run time of this algorithm as
Sigma(k=1 to k=n-1) of log(n/k)
using logarithm rules this is equal to  ( log(a/b) = log(a) - log(b) )
= Sigma(k=1 to k=n-1) of log(n) - Sigma(k=1 to k=n-1) of log(k)
= (n-1)log(n) - [ log(1) + log(2) + ... + log(n-1) ]
using two more logarithm rules we get this  ( alog(b) = log(b^a), log(a) + log(b) = log(ab) )
= log(n^(n-1)) - log((n-1)!)
reusing the first logarithm rule
= log( n^(n-1) / (n-1)! )
